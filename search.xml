<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>一点思考</title>
    <url>/2019/12/05/%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>对递归的理解</title>
    <url>/2019/12/05/%E5%AF%B9%E9%80%92%E5%BD%92%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="一：什么是递归"><a href="#一：什么是递归" class="headerlink" title="一：什么是递归"></a>一：什么是递归</h1><p>所谓递归，简单点来说，就是一个函数直接或间接调用自身的一种方法，它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解。</p>
<p>我们可以把递归比喻成查字典，当你查一个词，发现这个词的解释中某个词仍然不懂，于是你开始查这第二个词。可惜，第二个词里仍然有不懂的词，于是查第三个词，这样查下去，直到有一个词的解释是你完全能看懂的，那么递归走到了尽头，然后你开始后退，逐个明白之前查过的每一个词，最终，你明白了最开始那个词的意思。（摘自知乎的一个回答）<br>(<code>)
int Factorial(int n){    
      if (n == 0){
         return 1;
      }  
      return. n * Factorial(n - 1);
}
(</code>)</p>
<h1 id="二：递归与栈的关系"><a href="#二：递归与栈的关系" class="headerlink" title="二：递归与栈的关系"></a>二：递归与栈的关系</h1><p>常常听到”递归的过程就是出入栈的过程”，这句话怎么理解？我们以上述代码为例，取 n=3，则过程如下：<br>第 1<del>4 步，都是入栈过程，Factorial(3)调用了Factorial(2)，Factorial(2)又接着调用Factorial(1)，直到Factorial(0)；<br>第 5 步，因 0 是递归结束条件，故不再入栈，此时栈高度为 4，即为我们平时所说的递归深度；<br>第 6</del>9 步，Factorial(0)做完，出栈，而Factorial(0)做完意味着Factorial(1)也做完，同样进行出栈，重复下去，直到所有的都出栈完毕，递归结束。<br>每一个递归程序都可以把它改写为非递归版本。我们只需利用栈，通过入栈和出栈两个操作就可以模拟递归的过程，二叉树的遍历无疑是这方面的代表。<br>但是并不是每个递归程序都是那么容易被改写为非递归的。某些递归程序比较复杂，其入栈和出栈非常繁琐，给编码带来了很大难度，而且易读性极差，所以条件允许的情况下，推荐使用递归。</p>
<h1 id="三：如何思考递归"><a href="#三：如何思考递归" class="headerlink" title="三：如何思考递归"></a>三：如何思考递归</h1><p>在初学递归的时候, 看到一个递归实现,我们总是难免陷入不停的验证之中，比如上面提及的阶乘，求解Factorial(n)时，我们总会情不自禁的发问，Factorial(n-1)可以求出正确的答案么？接着我们就会再用Factorial(n-2)去验证，不停地往下验证直到Factorial(0)。<br>对递归这样的不适应，和我们平时习惯的思维方式有关。我们习惯的思维是：已知Factorial(0)，乘上 1 就等于Factorial(1)，再乘以 2 就等于Factorial(2)，直到乘到 n。<br>而递归和我们的思维方式正好相反。<br>那我们怎么判断这个递归计算是否是正确的呢？Paul Graham 提到一种方法，如下：</p>
<p>如果下面这两点是成立的，我们就知道这个递归对于所有的 n 都是正确的。</p>
<p>当 n=0,1 时，结果正确；</p>
<p>假设递归对于 n 是正确的，同时对于 n+1 也正确。</p>
<p>这种方法很像数学归纳法，也是递归正确的思考方式，上述的第 1 点称为基本情况，第 2 点称为通用情况。</p>
<p>在递归中，我们通常把第 1 点称为终止条件，因为这样更容易理解，其作用就是终止递归，防止递归无限地运行下去。</p>
<p>下面我们用两个例子来具体说明这种数学归纳法：</p>
<h1 id="例-1-汉诺塔展开目录"><a href="#例-1-汉诺塔展开目录" class="headerlink" title="例 1 汉诺塔展开目录"></a>例 1 汉诺塔展开目录</h1><p>问题描述为：有三根杆子 A，B，C。A 杆上有 N 个穿孔圆盘，盘的尺寸由上到下依次变大，B，C 杆为空。要求按下列规则将所有圆盘移至 C 杆：</p>
<p>每次只能移动一个圆盘；</p>
<p>大盘不能叠在小盘上面。</p>
<p>问：如何移？最少要移动多少次？</p>
<p>首先看下基本情况，即终止条件：N=1 时，直接从 A 移到 C。</p>
<p>再来看下通用情况：当有 N 个圆盘在 A 上，我们已经找到办法将其移到 C 杠上了，我们怎么移动 N+1 个圆盘到 C 杠上呢？很简单，我们首先用将 N 个圆盘移动到 C 上的方法将 N 个圆盘都移动到 B 上，然后再把第 N+1 个圆盘（最后一个）移动到 C 上，再用同样的方法将在 B 杠上的 N 个圆盘移动到 C 上，问题解决。</p>
<p>代码如下：<br>(<code>)
void Hanoi(int n, char a, char b, char c){    //终止条件
    if (n == 1)
    {
         cout &lt;&gt;a &lt;&gt;&#39;--&gt;&#39; &lt;&gt;c &lt;&gt;endl;        
         return;
    }    //通用情况
    Hanoi(n - 1, a, c, b);
    Hanoi(1, a, b, c);
    Hanoi(n - 1, b, a, c);
}
(</code>)</p>
<h1 id="例-2-求二叉树节点个数展开目录"><a href="#例-2-求二叉树节点个数展开目录" class="headerlink" title="例 2 求二叉树节点个数展开目录"></a>例 2 求二叉树节点个数展开目录</h1><p>首先看下基本情况，即终止条件：当为空树时，节点数为 0；<br>再来看下通用情况：当前节点的左，右子树节点数都被求出，则以当前结点为根的二叉树的节点总数就是 “左子树 + 右子树 + 1”。<br>代码如下：<br>(<code>)
int GetNodes(Node * node){    //终止条件
    if (node == nullptr)
      return 0;    //通用情况
    return GetNodes(node-&gt;left) + GetNode(node-&gt;right) + 1;
}
(</code>)</p>
<h1 id="四：什么时候该用递归"><a href="#四：什么时候该用递归" class="headerlink" title="四：什么时候该用递归"></a>四：什么时候该用递归</h1><p>当我们遇到一个问题时，我们是怎么判断该题用递归来解决的？</p>
<p>1)问题可用递归来解决需具备的条件：</p>
<p>2)子问题需与原问题为同样的事，且规模更小；</p>
<p>3)程序停止条件。</p>
]]></content>
  </entry>
  <entry>
    <title>培养良好的代码风格</title>
    <url>/2019/12/02/article/</url>
    <content><![CDATA[<p>  最近终于所有的乱七八糟的事情都要结尾啦，开始真正静下心来刷题，刷了几个就开始思考刷题的意义～<br>  无容置疑，写程序数据结构+算法是一定要掌握哒，程序=算法+数据结构<br>  但是我觉得，不能单纯的为了写题而写题，写题的过程中，还要注意自己的代码风格，写题不应该是面向面试，而是要抱着锻炼思维能力的想法去刷题，从今天起，这篇文章将会记录我从各地搜来的如何培养良好代码风格的文章，还有刷题过程中的七七八八的零碎想法～<br>  #version1 Google Java 代码规范</p>
<p>  先贴一个链接吧～后续再来整理<br>  <a href="https://www.jianshu.com/p/2c58ec4f12dd" target="_blank" rel="noopener">谷歌代码规范</a></p>
]]></content>
      <categories>
        <category>代码风格</category>
      </categories>
      <tags>
        <tag>一些想法</tag>
        <tag>代码风格</tag>
      </tags>
  </entry>
</search>
